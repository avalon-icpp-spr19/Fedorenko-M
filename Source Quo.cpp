#include "Extention.hpp"
#include <iostream>
using namespace std;
int main() {
	setlocale(0, "");
	/* Задание 1
	Объявите массив для хранения 10-ти целочисленных элементов
	Объявите константный массив для хранения 20-ти вещественных элементов
	Объявите массив для хранения 2-х символьных элементов
	Пусть есть массив объявленный следующим образом:
	int data[6] = { 2, 4, 8, 16, 32, 64 };
	Какой размер имеет данный массив?
	Данные какого типа он хранит
	Чему равен элемент массива с индексом 0?
	Чему равен элемент массива с индексом 3?
	Какой индекс у элемента 8?
	Какой индекс у элемента 32?
	Присвойте первому элементу массива значение 1.
	Утройте значение последнего элемента в массиве.
	Выведите элементы массива на экран через пробел.
	Объявите массив для хранения 5-ти элеменов любого типа и проинизиализируете его с помощью списка инициализации
	Выведите объявленный массив на экран.
	Можно ли не указывать размер массива при его создании?
	Если можно, то продемострируйте это.
	Пусть массив объявили следующим образом:
	int data[5] = { 1, 2 }
	Каков размер данного массива?
	Чему равен элемент с индексов 1? Чему равен элемент с индексом 2?
	Проверьте ответы с помощью дебагера.
	Выведите все элементы массива на экран.
	Пусть массив объявлен следующим образом:
	const char alpha[3] = { 'a', 'b', 'c' }
	Каков размер данного массива?
	Чему равен элемент с индексов 0? Чему равен индекс у элемента 'c'
	Допустимы ли следующие выражения:
	alpha[0];
	alpha[3];
	alpha[1] = 'd';
	alpha[1] = 'b';
	Выведите все элементы массива на экран.
	*/
	/*int Mas[10] = {};
	const float Mas1[20] = {};
	int data[6] = { 2, 4, 8, 16, 32, 64 };//Размер массива - 6, элемент [0]-2, элемент [3]-16, у элемента 8 индекс 2, у элемента 32 индекс 4
	data[0] = 1;
	data[5] *= 3;
	for (int i = 0; i < 6; i++) {
	cout << data[i] << " ";
	}
	double someArr[5] = { 1.63872,2.2345217889,3.21781422,4.123813,5.127868 };
	cout << endl;
	for (int i = 0; i < 5; i++) {
	cout << someArr[i] << " ";
	}
	int idkHowLongItIs[] = { 1,5,15,5,4,5,4,4,5,5,4,5,4,5,4,5,4,75,4,4, };
	int data1[5] = { 1, 2 };//Размер этого массива - 5, элемент с индексом 1 равен 2, а элемент с индексом 2 равен 0.Объявив таким образом массив мы проинициализировали только первых два элемента, остальные стали нулями
	cout << endl;
	for (int i = 0; i < 5; i++) {
	cout << data1[i] << " ";
	}
	const char alpha[3] = { 'a', 'b', 'c' };//Размер массива - 3, элемент с индексом 0 равен 'a', индекс элемента 'c' равен 2
	/*alpha[0]; - допустимо
	alpha[3]; - допустимо
	alpha[1] = 'd'; - недопустимо, т.к. массив константный
	alpha[1] = 'b'; - недопустимо, т.к. массив константный*/
	/*cout << endl;
	for (int i = 0; i < 3; i++) {
	cout << alpha[i] << " ";
	}*/
	/*
	Задание 2
	Объявите массив для хранения переменных типа int размером 20;
	Запишите в объявленный массив первые 20 натуральных чисел в порядке возрастания
	Выведите все элементы массива на экран
	Запишите в этот же массив первые 20 четных чисел в порядке возрастания
	Выведите все элементы массива на экран
	Запишите в этот же массив первые 20 степеней двойки (2^0, 2^1, ... , 2^19). Функцию pow не использовать
	Выведите все элементы массива на экран по 5 элементов в одной строке
	Занулите в предыдущем массивы все элементы с нечетным индексов (i = 1, 3, ..., 19);
	Выведите все элементы массива на экран по 5 элементов в одной строке
	*/
	/*int Arr[20] = {};
	for (int i = 1; i <= 20; i++) {//Задание 1
	Arr[i - 1] = i;
	}
	for (int i = 0; i < 20; i++) {
	cout << Arr[i] << " ";
	}
	cout << endl;
	for (int i = 1; i <= 20; i++) {//Задание 2
	for (int j = i; j >= 0; j--) {
	Arr[i - 1] = i * 2;
	}
	}
	for (int i = 0; i < 20; i++) {
	cout << Arr[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < 20; i++) {//Задание 3
	Arr[i] = 1;
	}
	for (int i = 1; i <= 20; i++) {
	for (int j = i; j >= 0; j--) {
	Arr[i - 1] *= 2;
	}
	}
	for (int i = 0; i < 20; i++) {
	cout << Arr[i] << " ";
	}
	cout << endl;
	for (int i = 1; i <= 20; i++) {//Задание 4
	cout << Arr[i-1] << " ";
	if (i % 5 == 0) {
	cout << endl;
	}
	}
	cout << endl;
	for (int i = 0; i < 20; i++) {//Задание 5
	if (i % 2 == 0) {
	Arr[i] = 0;
	}
	}
	for (int i = 1; i <= 20; i++) {
	cout << Arr[i - 1] << " ";
	if (i % 5 == 0) {
	cout << endl;
	}
	}*/
	/* Задание 3
	При выполнении дальнейших заданий для заполнения массива случайными числами использовать функцию ext::GetRandomValue из Extention.hpp
	Например:
	int data[10];
	for(int i = 0; i < 10; ++i)
	{
	data[i] = ext::GetRandomValue(0, 100, true);
	}
	После выполнения данного кода массив data будет содержать 10 чисел в диапазоне от 0 до 100.
	Сгенерируйте массив из 10 элементов в диапазоне от -10 до 10.
	Выведите его на экран
	Найдите наибольший элемент в массиве.
	Выведите на экран значение этого элемента и его индекс
	(если максимальных элементов несколько вывести индекс любого).
	Сгенерируйте массив из 100 элементов в диапазоне от -100 до 100.
	Посчитайте и выведите на экран
	Сумму всех элементов этого массива.
	Количество элементов меньше 0, количество элементов равных 0, количество элементов больше 0
	Сгенерируйте массив из 100 элементов в диапазоне от 1 до 100.
	Вывести на экран
	Элементы в записи которых встречается цифра 2
	Элементы в записи которых не встречаются нечетные цифры
	Сложите поэлементно массивы из двух предыдущих пунктов, записав результаты сложения в новый массив
	Выведите на экран получившийся массив по 10 элементов в строке.
	Сгенерируйте массив из 100 элементов в диапазоне от 1 до 100.
	Попросите пользователя ввести число из этого же диапазона.
	Осуществите поиск элемента в массиве.
	Если число есть в массиве выведите его индекс, если числа нет выведите -1.
	Посчитайте и выведите на экран количество элементов больших, чем введенное пользователем число.
	/*
	/*int data[10]={};//Задание 1 или очень простое задание
	int max = 0, sum = 0, counterMore = 0, counterLess = 0, counterEquals = 0;
	for (int i = 0; i < 10; ++i)
	{
	data[i] = ext::GetRandomValue(-10, 10, true);
	}
	for (int i = 0; i < 10; i++) {
	cout << data[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < 10; i++) {
	if (data[i] > data[max]) {
	max = i;
	}
	}
	cout << "Индекс максимального элемента: " << max << " Значение максимального элемента: " << data[max] << endl;
	int arrGener[100] = {};//Задание 2 или больше или меньше нуля ли этот элемент
	for (int i = 0; i < 100; ++i)
	{
	arrGener[i] = ext::GetRandomValue(-100, 100, true);
	sum += arrGener[i];
	if (arrGener[i] == 0) {
	counterEquals += 1;
	}
	else {
	if (arrGener[i] > 0) {
	counterMore += 1;
	}
	else {
	counterLess += 1;
	}
	}
	}
	cout << "Сумма элементов массива: " << sum << " Количество элементов, которые меньше нуля: " << counterLess << " Количество элементов, которые равны нулю: " << counterEquals << " Количество элементов, которые больше нуля: " << counterMore << endl;
	int arrGener2[100] = {};//Задание 3 или задание с разрядами
	int ed = 0, des = 0;
	for (int i = 0; i < 100; ++i)
	{
	arrGener2[i] = ext::GetRandomValue(1, 100, true);
	}
	for (int i = 0; i < 100; i++) {
	cout << arrGener2[i] << " ";
	}
	cout << endl;
	cout << "Элементы, в записи которых содержится двойка: ";
	for (int i = 0; i < 100; i++) {
	ed = arrGener2[i] % 10;
	des = (arrGener2[i] / 10) % 10;
	if ((ed == 2) || (des == 2)) {
	cout << arrGener2[i] << " ";
	}
	}
	cout << endl;
	cout << "Элементы, в записи которых не встречается нечетных цифр: ";
	for (int i = 0; i < 100; i++) {
	ed = arrGener2[i] % 10;
	des = (arrGener2[i] / 10) % 10;
	if ((ed % 2 == 0) && (des % 2 == 0) && (arrGener2[i] / 10 != 1)){
	cout << arrGener2[i] << " ";
	}
	}
	cout << endl;
	int arrSum[100] = {};//Задание 4 или складываем массивы
	for (int i = 0; i < 100; i++) {
	arrSum[i] = arrGener[i] + arrGener2[i];
	}
	for (int i = 1; i <= 100; i++) {
	cout << arrSum[i - 1] << " ";
	if (i % 10 == 0) {
	cout << endl;
	}
	}
	cout << endl;
	int arrGener3[100] = {};//Задание 3 или найди элемент
	int userReq = 0, counter = 0;
	bool returndTruth = false;
	for (int i = 0; i < 100; ++i)
	{
	arrGener3[i] = ext::GetRandomValue(1, 100, true);
	}
	cout << "Какой элемент ищем?" << endl;
	cin >> userReq;
	for (int i = 0; i < 100; i++) {
	if (userReq == arrGener3[i]) {
	returndTruth = true;
	cout << "О, а этот элемент тут есть!Вот его индекс: " << i << endl;
	break;
	}
	if (userReq < arrGener3[i]) {
	counter += 1;
	}
	}
	if (returndTruth == false) {
	cout << "Вам  не повезно с генерацией и вашего элемента я не нашел...Ах да, мне тут надо вывести -1..."<<endl;
	cout << -1<<endl;
	}
	cout << "Минутка интересных (нет) фактов!Я нашел " << counter << " чисел, которые больше вашего числа!Это ведь вам так нужно...";*/
	/* Задание 4
	Сгенерируйте массив типа char из 100 элементов в диапазоне от a до z.
	Подсказка: функцию генерации рандомного элемента можно вызвать следующим образом:
	GetRandomValue('a','z');
	Выведите получившейся массив на экран в виде одной строки.
	Выведите на экран как часто каждая буква встречается в сгенерированном массиве.
	Выведите на экран вертикальную гистограмму рассчитанной частоты символов.
	Пример: "aabbdddz" для такой строки получится следующая гистограмма:
	|**
	|**
	|
	|***
	|
	|
	...
	|
	|
	|*
	На основании произведенных расчетов замените числовое представление на гистограмму, составленную из символов '*'
	*/
	/*
	char arrayOfChar[100] = {};
	int raretyOfElems[26] = {};
	for (int i = 0; i < 100; i++) {
		arrayOfChar[i]=ext::GetRandomValue('a', 'z');
		raretyOfElems[arrayOfChar[i] - 'a'] += 1;
		cout << arrayOfChar[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < 26; i++) {
		cout << "|";
		for (int j = 0; j < raretyOfElems[i]; j++) {
			cout << "*";
		}
		cout << endl;
	}
	*/
	/* Задание 5
	Пусть есть двумерный массив объявленный следующим образом:
	int data[3][2] = { {2, 4}, {8, 16}, {32, 64} };
	Чему равно количество строк в данном массиве?    - 3
	Чему равно количество элементов в каждой строке? - 2
	Какой размер имеет данный массив?                - [3][2]
	Данные какого типа он хранит?                    - int
	Как обратиться к элементу со значением 8?        - data[1][0]
	Как обратиться к элементу со значением 64?       - data[2][1]
	Присвойте первому элементу массива значение 1.
	Удвойте значение последнего элемента в массиве.
	Объявите двумерный массив размером 4х2 любого типа и проинизиализируете его с помощью списка инициализации
	Можно ли не указывать размер двумерного массива при его создании?
	Если можно, то продемострируйте это.
	*/
	int array[][4] = { {1,2,3,4},{1,2,3,4},{1,2,3,4} }; //количество элементов в строке можно не указывать, но придется инициализировать массив, строки обязательны
	/*
	Пусть массив объявили следующим образом:
	int data[][4] = { {1, 2}, {3,4,5} }                
	Каков размер данного массива?                    - [2][4]
	Чему равен элемент data[0][0]? Чему равен элемент data[1][2]?   - 5
	Проверьте ответы с помощью дебагера.
	Увеличьте в два раза каждый элемент в данном массиве.
	Выведите все элементы массива на экран.
	Использовать циклы for
	*/
	/*
	int data[][4] = { { 1, 2 },{ 3,4,5 } };
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < 4; j++) {
			data[i][j] *= 2;
			cout << data[i][j] << " ";
		}
	}
	*/
	/* Задание 6
	Сгенерируйте двумерный массив размером 10x10.
	Заполните его случайными значениями от 0 до 100
	Найдите и выведите на экран:
	Сгенерированный массив
	Сумму всех элементов массива
	Количество всех четных элементов.
	Максимальный и минимальный элементы массива вместе с их индексами
	*/
	/*
	int doubleArray[10][10] = {};
	int sum = 0, amountOfEven = 0, minIndexLine = 0, minIndexString = 0, maxIndexLine = 0, maxIndexString = 0;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			doubleArray[i][j] = ext::GetRandomValue(1, 100);
			cout << doubleArray[i][j]<<" ";
			sum += doubleArray[i][j];
			if (doubleArray[i][j] % 2 == 0) {
				amountOfEven += 1;
			}
			if (doubleArray[i][j] < doubleArray[minIndexLine][minIndexString]) {
				minIndexLine = i;
				minIndexString = j;
			}
			if (doubleArray[i][j] > doubleArray[maxIndexLine][maxIndexString]) {
				maxIndexLine = i;
				maxIndexString = j;
			}	
		}
		cout << endl;
	}
	
	cout << "Сумма элементов: " << sum << " количество четных элементов: " << amountOfEven << " минимальный элемент: " << minIndexLine << " " << minIndexString << " максимальный элемент: " << maxIndexLine << " " << maxIndexString;
	*/
	/* Дополнительное задание
	На вход подается строка, описывающая ситуацию на поле в игре "Крестики-нолики".
	На ее основании необходимо заполнить двумерный массив char field[3][3],
	и, проаназилировав его, вывести победителя или Draw,
	если выигрышной последовательности нет ни у одного, либо есть у обоих.
	Тестовые данные				Ожидаемый результат
	XXX OO. ...					Winner is X
	OXO XO. .XO					Draw
	OXO XOX OX.					Draw
	XOX OXO OXO					Draw
	... ... ...					Draw
	XXX OOO ...					Draw
	XOO XOO XX.					Winner is X
	.O. XO. XOX					Winner is O
	*/
}
